[2024.11.02 함수 타입의 호환성]

한 입 크기로 잘라먹는 타입스크립트 - 함수 타입의 호환성

1. 함수 타입 호환성
특정 함수 타입을 다른 함수 타입으로 취급해도 괜찮은가를 판단.
2가지 체크리스트)
1) 반환값의 타입이 호환되는지?
2) 매개변수의 타입이 호환되는지?
-> 2가지 모두 만족해야 두 함수의 타입이 호환된다 말할 수 있다.

- chapter2.ts
/**
 * 함수 타입 호환성
 */
// 기준1. 반환값이 호환되는가?
// 반환값끼리 업캐스팅하는 상황에서는 호환O
// 반환값끼리 다운캐스팅하는 상황에서는 호환X
type A = () => number; // number 타입
type B = () => 10; // number 리터럴 타입

let a: A = () => 10;
let b: B = () => 10;

a = b; // 허용 (업캐스팅 : number 리터럴 -> number)
// b = a; // 미허용 (다운캐스팅 : number -> number 리터럴)

// 기준2. 매개변수가 호환되는가?
// 2-1. 매개변수의 개수가 같을 때
// 반환값끼리 업캐스팅하는 상황에서는 호환X
// 반환값끼리 다운캐스팅하는 상황에서는 호환O
type C = (value: number) => void;
type D = (value: 10) => void;

let c: C = (value) => {};
let d: D = (value) => {};

// c = d; // 미허용 (업캐스팅 : number 리터럴 -> number)
d = c; // 허용 (다운캐스팅 : number -> number 리터럴)

// 왜 그런지 매개변수를 객체 타입으로 사용하는 예시
type Animal = { // 슈퍼 타입 : 조건이 더 적음
    name: string;
};
type Dog = {
    name: string;
    color: string;
};

let animalFunc = (animal: Animal) => {
    console.log(animal.name);
};
let dogFunc = (dog: Dog) => {
    console.log(dog.name);
    console.log(dog.color);
};

// animalFunc = dogFunc; // 미허용 (업캐스팅 예시)
let testFunc = (animal: Animal) => {
    console.log(animal.name);
    // console.log(animal.color); // Animal 객체엔 name 프로퍼티가 존재하지 않기 때문
};
dogFunc = animalFunc; // 허용 (다운캐스팅 예시)
let testFunc2 = (dog: Dog) => {
    console.log(dog.name); // Animal 타입의 서브타입이기 때문이 Animal 타입의 객체가 가진 모든 프로퍼티를 가지고 있기 때문
};

// 2-2. 매개변수의 개수가 다를 때
// 기준. 매개변수의 타입이 같을 때
type Func1 = (a: number, b: number) => void;
type Func2 = (a: number) => void;

let func1: Func1 = (a, b) => {};
let func2: Func2 = (a) => {};

func1 = func2; // 허용 (개수 : 1개 -> 2개)
// func2 = func1; // 미허용 (개수 : 2개 -> 1개)


참고링크 : https://www.inflearn.com/course/%ED%95%9C%EC%9E%85-%ED%81%AC%EA%B8%B0-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8#